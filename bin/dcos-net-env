#!/bin/bash

APP_NAME=dcos-net

function valid_ip()
{
    local  ip=$1
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

function check_epmd() {
    if ! ${ERTS_DIR}/bin/epmd -port ${ERL_EPMD_PORT} -names > /dev/null; then
        echo "EPMD is not reachable at port \"${ERL_EPMD_PORT}\"" >&2
        exit 1;
    fi
}

ENV_FILE="/opt/mesosphere/etc/${APP_NAME}.env"
if [ -f $ENV_FILE ]; then
  . $ENV_FILE
fi

## Try to ascertain the node IP based on some set of heuristics
IP=127.0.0.1
if [ -x /opt/mesosphere/bin/detect_ip ]; then
    IP=$(/opt/mesosphere/bin/detect_ip)
    if ! valid_ip $IP; then
        ## 192.88.99.0 was chosen because it's a anycast IP
        ## used for v6 tunnels
        IP=$(ip r g 192.88.99.0 | grep -Po 'src \K[\d.]+')
    fi
else
    IP=$(ip r g 192.88.99.0 | grep -Po 'src \K[\d.]+')
fi
NAME=${APP_NAME}@${IP}
SCRIPT=$(readlink -f $0 || true)
[ -z $SCRIPT ] && SCRIPT=$0
SCRIPT_DIR="$(cd `dirname "$SCRIPT"` && pwd -P)"
RELNAME="${SCRIPT_DIR}/${APP_NAME}"

## If ERLANG_DISTRIBUTION is unset, then set it to inet_tcp
ERLANG_DISTRIBUTION=${ERLANG_DISTRIBUTION:=inet_tcp}
export ERLANG_DISTRIBUTION
CLIENT_CACERTFILE=${CLIENT_CACERTFILE:=/run/dcos/pki/CA/certs/ca.crt}
export CLIENT_CACERTFILE
CLIENT_KEYFILE=${CLIENT_KEYFILE:=/run/dcos/pki/tls/private/${APP_NAME}.key}
export CLIENT_KEYFILE
CLIENT_CERTFILE=${CLIENT_CERTFILE:=/run/dcos/pki/tls/certs/${APP_NAME}.crt}
export CLIENT_CERTFILE
CLIENT_VERIFY=${CLIENT_VERIFY:=verify_peer}
export CLIENT_VERIFY
CLIENT_DEPTH=${CLIENT_DEPTH:=10}
export CLIENT_DEPTH
SERVER_CACERTFILE=${SERVER_CACERTFILE:=/run/dcos/pki/CA/certs/ca.crt}
export SERVER_CACERTFILE
SERVER_KEYFILE=${SERVER_KEYFILE:=/run/dcos/pki/tls/private/${APP_NAME}.key}
export SERVER_KEYFILE
SERVER_CERTFILE=${SERVER_CERTFILE:=/run/dcos/pki/tls/certs/${APP_NAME}.crt}
export SERVER_CERTFILE
SERVER_VERIFY=${SERVER_VERIFY:=verify_peer}
export SERVER_VERIFY
SERVER_FAIL_IF_NO_PEER_CERT=${SERVER_FAIL_IF_NO_PEER_CERT:=true}
export SERVER_FAIL_IF_NO_PEER_CERT
SERVER_DEPTH=${SERVER_DEPTH:=10}
export SERVER_DEPTH


## By default MESOS_STATE_SSL_ENABLED is false
MESOS_STATE_SSL_ENABLED=${MESOS_STATE_SSL_ENABLED:=false}
export MESOS_STATE_SSL_ENABLED

## SSL / Distributed Erlang config
export ERL_FLAGS="${ERL_FLAGS} -proto_dist ${ERLANG_DISTRIBUTION}"
export ERL_FLAGS="${ERL_FLAGS} -ssl_dist_opt client_cacertfile ${CLIENT_CACERTFILE}"
export ERL_FLAGS="${ERL_FLAGS} -ssl_dist_opt client_keyfile ${CLIENT_KEYFILE}"
export ERL_FLAGS="${ERL_FLAGS} -ssl_dist_opt client_certfile ${CLIENT_CERTFILE}"
export ERL_FLAGS="${ERL_FLAGS} -ssl_dist_opt client_verify ${CLIENT_VERIFY}"
export ERL_FLAGS="${ERL_FLAGS} -ssl_dist_opt client_depth ${CLIENT_DEPTH}"
export ERL_FLAGS="${ERL_FLAGS} -ssl_dist_opt server_cacertfile ${SERVER_CACERTFILE}"
export ERL_FLAGS="${ERL_FLAGS} -ssl_dist_opt server_keyfile ${SERVER_KEYFILE}"
export ERL_FLAGS="${ERL_FLAGS} -ssl_dist_opt server_certfile ${SERVER_CERTFILE}"
export ERL_FLAGS="${ERL_FLAGS} -ssl_dist_opt server_verify ${SERVER_VERIFY}"
export ERL_FLAGS="${ERL_FLAGS} -ssl_dist_opt server_fail_if_no_peer_cert ${SERVER_FAIL_IF_NO_PEER_CERT}"
export ERL_FLAGS="${ERL_FLAGS} -ssl_dist_opt server_depth ${SERVER_DEPTH}"

## Mesos state config (SSL)
export ERL_FLAGS="${ERL_FLAGS} -mesos_state ssl ${MESOS_STATE_SSL_ENABLED}"

### EPMD
export ERL_EPMD_PORT=61420
ERTS_VSN="{{ erts_vsn }}"
RELEASE_ROOT_DIR="$(cd `dirname "${SCRIPT_DIR}"` && pwd -P)"
ERTS_DIR="$RELEASE_ROOT_DIR/erts-$ERTS_VSN"
check_epmd

## Set application name
export ESCRIPT_NAME=$(dirname $SCRIPT_DIR)

NAME=${NAME} RELX_REPLACE_OS_VARS=true RELX_OUT_FILE_PATH=/tmp ${RELNAME} $@
